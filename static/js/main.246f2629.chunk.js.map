{"version":3,"sources":["components/PageContainer.js","components/BaseButton.js","components/types/trackType.js","components/TrackCard.js","components/TrackList.js","components/BaseSelect.js","components/SelectGenreNavbar.js","components/Loader.js","components/Widget.js","components/Player.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["pageContainerStyle","css","PageContainer","children","buttonClass","theme","colors","grey","BaseButton","props","PropTypes","shape","name","string","eId","img","trackCardStyle","trackCardTitleStyle","trackCardBodyStyle","trackCardDescriptionStyle","trackCardPortraitStyle","trackCardPortraitImageStyle","TrackCard","track","alt","src","trackListStyle","TrackList","tracks","playThis","length","data-testid","map","key","_id","onClick","e","selectStyle","black","white","BaseSelect","options","option","index","value","navbarEl","document","querySelectorAll","Stickyfill","add","genreTags","stickySearchBarStyle","labelStyle","SelectGenreNavbar","selectGenre","className","htmlFor","id","placeholder","title","onChange","loaderStyle","Loader","isLoading","message","role","iframeStyle","formatCases","yt","url","formatYoutubeLink","sc","formatSoundCloudLink","bc","vi","dz","fi","getWidgetLink","format","urlParams","cases","pred","withOrCasesKey","Object","keys","find","includes","args","switchcase","trackUrl","encodeURIComponent","Widget","split","link","frameBorder","allow","allowFullScreen","modalStyles","content","top","left","right","bottom","marginRight","zIndex","transform","display","justifyContent","alignItems","flexDirection","Modal","setAppElement","Player","useState","loading","tracksState","setTracksState","selectedTrack","setSelectedTrack","selectedGenre","setSelectedGenre","modalIsOpen","setIsOpen","closeModal","useEffect","fetchTracks","genre","a","apiUrl","encodeURI","axios","get","data","console","log","preventDefault","target","isOpen","onRequestClose","style","contentLabel","full","primary","balck","App","styles","normalize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.246f2629.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst pageContainerStyle = css`\n  width: 80vw;\n  max-width: 1200px;\n  margin: 1em auto 2em;\n  padding: 0.8rem 1rem 1.2rem;\n`;\n\nexport default function PageContainer({ children }) {\n  return <main css={pageContainerStyle}>{children}</main>;\n}\n\nPageContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element.isRequired,\n  ]),\n};\n","import React from 'react';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst buttonClass = (theme) => css`\n  cursor: pointer;\n  text-align: center;\n  white-space: nowrap;\n  width: 100%;\n  vertical-align: middle;\n  user-select: none;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  margin: 0.6rem 0 0.4rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n  display: inline-flex;\n  background: ${theme.colors.grey};\n  justify-content: center;\n  &:focus {\n    outline: 1px dotted;\n    outline: 5px auto -webkit-focus-ring-color;\n  }\n\n  &:disabled {\n    opacity: 0.8;\n    cursor: not-allowed;\n    pointer-events: all;\n  }\n`;\n\nexport default function BaseButton(props) {\n  return <button css={buttonClass} {...props} />;\n}\n","import PropTypes from 'prop-types';\n\nconst trackType = PropTypes.shape({\n  name: PropTypes.string,\n  eId: PropTypes.string,\n  img: PropTypes.string,\n});\n\nexport default trackType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport trackType from './types/trackType';\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport LazyLoad from 'react-lazyload';\n\nconst trackCardStyle = (theme) => css`\n  border: solid 0.2rem ${theme.colors.grey};\n  margin: 0.8rem 0.4rem;\n  width: 28%;\n  padding: 1rem;\n  @media screen and (max-width: 1200px) {\n    width: 40%;\n  }\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\nconst trackCardTitleStyle = css`\n  margin-top: 1rem;\n`;\nconst trackCardBodyStyle = css`\n  min-height: 6em;\n  display: flex;\n  flex-wrap: wrap;\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n    height: auto;\n  }\n`;\nconst trackCardDescriptionStyle = css`\n  text-align: left;\n  flex: 1.5;\n`;\nconst trackCardPortraitStyle = css`\n  display: flex;\n  flex: 1;\n  justify-content: center;\n`;\nconst trackCardPortraitImageStyle = css`\n  height: 6rem;\n  margin-right: 1rem;\n  object-fit: contain;\n  @media screen and (max-width: 767px) {\n    width: 100%;\n    margin-bottom: 1.6rem;\n  }\n`;\n\nexport default function TrackCard({ track, children }) {\n  const { img, name } = track;\n  return (\n    <div css={trackCardStyle}>\n      <div css={trackCardBodyStyle}>\n        <div css={trackCardPortraitStyle}>\n          <LazyLoad>\n            <img css={trackCardPortraitImageStyle} alt={name} src={img} />\n          </LazyLoad>\n        </div>\n        <div css={trackCardDescriptionStyle}>\n          <span css={trackCardTitleStyle}>{name}</span>\n        </div>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nTrackCard.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.element),\n    PropTypes.element.isRequired,\n  ]),\n  track: trackType,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseButton from './BaseButton';\nimport TrackCard from './TrackCard';\nimport trackType from './types/trackType';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst trackListStyle = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\nexport default function TrackList(props) {\n  const { tracks, playThis } = props;\n  if (!tracks || tracks.length === 0) return <p>No tracks, sorry</p>;\n  return (\n    <div data-testid=\"tracklist\" css={trackListStyle}>\n      {tracks.map((track) => {\n        return (\n          <TrackCard key={track._id} track={track}>\n            <BaseButton\n              data-testid={`trackbutton-${track._id}`}\n              onClick={(e) => playThis(e, track)}\n            >\n              Play this\n            </BaseButton>\n          </TrackCard>\n        );\n      })}\n    </div>\n  );\n}\n\nTrackList.propTypes = {\n  tracks: PropTypes.arrayOf(trackType),\n  playThis: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst selectStyle = (theme) =>\n  css`\n     {\n      display: block;\n      height: 2.6rem;\n      padding: 0.375rem 0.75rem;\n      font-size: 0.8rem;\n      font-weight: 700;\n      color: ${theme.colors.black};\n      background-color: ${theme.colors.white};\n      background-image: none;\n      border: 0.1rem solid ${theme.colors.grey};\n      border-radius: 0.2rem;\n    }\n\n    &:focus {\n      border-color: orange;\n      outline: none;\n    }\n  `;\n\nexport default function BaseSelect(props) {\n  const { options } = props;\n  return (\n    <select css={selectStyle} {...props}>\n      {options.map((option, index) => {\n        return (\n          <option key={index} value={option}>\n            {option}\n          </option>\n        );\n      })}\n    </select>\n  );\n}\n\nBaseSelect.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n};\n","import React from 'react';\nimport BaseSelect from './BaseSelect';\nimport PropTypes from 'prop-types';\nimport Stickyfill from 'stickyfilljs';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst navbarEl = document.querySelectorAll('.sticky');\nStickyfill.add(navbarEl);\n\nconst genreTags = [\n  'all',\n  'electro',\n  'hip hop',\n  'indie',\n  'folk',\n  'rock',\n  'punk',\n  'metal',\n  'blues',\n  'r&b',\n  'soul',\n  'jazz',\n  'classical',\n  'reggae',\n  'pop',\n  'latin',\n  'world',\n];\nconst stickySearchBarStyle = (theme) => css`\n  position: sticky;\n  top: 0px;\n  padding: 1rem;\n  background: ${theme.colors.white};\n  border: solid 0.2rem ${theme.colors.grey};\n  display: flex;\n  align-items: center;\n  &:before,\n  &:after {\n    content: '';\n    display: table;\n  }\n`;\nconst labelStyle = css`\n  flex: 1;\n  display: block;\n  font-size: 1.2rem;\n  font-weight: bold;\n`;\nconst selectStyle = css`\n  flex: 1.5;\n`;\n\nexport default function SelectGenreNavbar({ selectGenre }) {\n  return (\n    <nav className=\"sticky\" css={stickySearchBarStyle}>\n      <label\n        data-testid=\"label-select\"\n        css={labelStyle}\n        htmlFor=\"searchByGenre\"\n      >\n        Select a genre\n      </label>\n      <BaseSelect\n        data-testid=\"select\"\n        css={selectStyle}\n        id=\"searchByGenre\"\n        placeholder=\"Select a genre\"\n        title=\"Select a Genre\"\n        onChange={(e) => selectGenre(e)}\n        options={genreTags}\n      />\n    </nav>\n  );\n}\nSelectGenreNavbar.propTypes = {\n  selectGenre: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst loaderStyle = css`\n  z-index: 999;\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nexport default function Loader({ isLoading, message }) {\n  if (!isLoading) return null;\n  return (\n    <div data-testid=\"overlay\" role=\"alert\" css={loaderStyle}>\n      <h3>{message}</h3>\n    </div>\n  );\n}\nLoader.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  message: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nconst iframeStyle = css`\n  width: 80vw;\n  height: calc((60vw / 16) * 9);\n`;\nconst formatCases = {\n  yt: (url) => formatYoutubeLink(url),\n  sc: (url) => formatSoundCloudLink(url),\n  bc: (url) => `Not Implemented`,\n  vi: (url) => `Not Implemented`,\n  dz: (url) => `Not Implemented`,\n  fi: (url) => `Not Implemented`,\n};\n\nconst switchcase = (cases, pred, ...args) => {\n  const withOrCasesKey = Object.keys(cases).find((key) => key.includes(pred));\n  return withOrCasesKey ? cases[withOrCasesKey](...args) : null;\n};\n\nconst getWidgetLink = (formatCases, format, urlParams) => {\n  return switchcase(formatCases, format, urlParams);\n};\n\nconst formatYoutubeLink = (urlParams) => {\n  const trackUrl = urlParams[2];\n  return `https://www.youtube.com/embed/${encodeURIComponent(\n    trackUrl\n  )}?autoplay=1`;\n};\n\nconst formatSoundCloudLink = (urlParams) => {\n  const trackUrl = urlParams[7];\n  return `https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/${trackUrl}&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true`;\n};\n\nexport default function Widget({ track }) {\n  const { eId, name } = track;\n  const urlParams = eId.split('/');\n  const format = urlParams[1];\n\n  const link = getWidgetLink(formatCases, format, urlParams);\n  return (\n    <iframe\n      title={name}\n      data-testid=\"iframe\"\n      css={iframeStyle}\n      src={link}\n      frameBorder=\"0\"\n      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n      allowFullScreen\n    ></iframe>\n  );\n}\n\nWidget.propTypes = {\n  track: PropTypes.shape({\n    name: PropTypes.string,\n    eId: PropTypes.string,\n    img: PropTypes.string,\n  }),\n};\n","import React, { useState, useEffect } from 'react';\nimport TrackList from './TrackList';\nimport SelectGenreNavbar from './SelectGenreNavbar';\nimport BaseButton from './BaseButton';\nimport Loader from './Loader';\nimport Widget from './Widget';\nimport Modal from 'react-modal';\nimport axios from 'axios';\n\nconst modalStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    zIndex: 2,\n    transform: 'translate(-50%, -50%)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n};\n\nModal.setAppElement('#root');\n\nfunction Player() {\n  const [tracksState, setTracksState] = useState({\n    loading: false,\n    tracks: [],\n  });\n\n  const [selectedTrack, setSelectedTrack] = useState(null);\n  const [selectedGenre, setSelectedGenre] = useState(null);\n  const [modalIsOpen, setIsOpen] = useState(false);\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n  useEffect(() => {\n    fetchTracks();\n  }, [setTracksState]);\n\n  const fetchTracks = async (genre) => {\n    setTracksState({ loading: true });\n\n    const apiUrl = genre\n      ? `/react_openwhyd_demo/hot/${encodeURI(genre)}?format=json`\n      : `/react_openwhyd_demo/hot/?format=json`;\n    try {\n      const {\n        data: { tracks },\n      } = await axios.get(apiUrl);\n      setTracksState({\n        loading: false,\n        tracks,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const playThis = (e, track) => {\n    e.preventDefault();\n    openModal();\n    setSelectedTrack(track);\n  };\n\n  const selectGenre = async (e, genre) => {\n    e.preventDefault();\n    setSelectedGenre(e.target.value);\n    await fetchTracks(e.target.value);\n  };\n\n  return (\n    <article>\n      <Loader\n        isLoading={tracksState.loading}\n        message={`Loading ${selectedGenre} tracks...`}\n      ></Loader>\n\n      <SelectGenreNavbar selectGenre={selectGenre} />\n\n      <header>\n        <h2>Top 20 {selectedGenre} tracks</h2>\n      </header>\n\n      <TrackList tracks={tracksState.tracks} playThis={playThis} />\n\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={modalStyles}\n        contentLabel=\"Example Modal\"\n      >\n        <Widget track={selectedTrack}></Widget>\n        <BaseButton full=\"true\" onClick={() => closeModal()}>\n          close player\n        </BaseButton>\n      </Modal>\n    </article>\n  );\n}\n\nexport default Player;\n","const theme = {\n  colors: {\n    primary: 'green',\n    grey: '#c3cfd9',\n    balck: '#222',\n    white: '#fefefe',\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport PageContainer from './components/PageContainer';\nimport Player from './components/Player';\nimport { Global, css } from '@emotion/core';\nimport normalize from 'normalize.css';\nimport { ThemeProvider } from 'emotion-theming';\n\nimport theme from './theme';\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Global\n        styles={css`\n          ${normalize}\n          body {\n            background-color: ${theme.colors.white};\n            color: ${theme.colors.black};\n          }\n        `}\n      />\n      <PageContainer>\n        <header>\n          <h1>Hot Tracks Player</h1>\n        </header>\n        <Player />\n      </PageContainer>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}